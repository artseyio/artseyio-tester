{"version":3,"sources":["model/KeyMapDefinition.ts","assets/logo.png","components/KeyMapper.tsx","components/IconButton.tsx","model/ComboDefinition.ts","components/ArtseyInput.tsx","effects/KeyMapperEffect.ts","App.tsx","components/Typography.tsx","index.tsx"],"names":["ArtsyCode","ArtsyKey","DefaultKeyMaps","name","keys","A","fromKey","toCode","toKey","R","T","S","E","Y","I","O","StyledKeyMapper","styled","div","p","theme","borderColor","textColor","KeyMapper","props","useState","keymaps","setKeyMaps","mapping","setMapping","useEffect","keymap","localStorage","getItem","customMap","JSON","parse","undefined","prev","selectedMap","find","map","onMappingChanged","onKeyChanged","targetCode","targetKey","value","newMapping","newKeyMaps","filter","k","push","setItem","stringify","onChange","e","target","def","id","className","StyledIconButton","button","textColorFaded","IconButton","active","disabled","title","tooltip","onClick","icon","Combos","StyledArtseyInput","cursorColor","colorRed","ArtseyInput","wordDivRef","useRef","isFocused","setFocused","setKeyMap","keyQueue","setKeyQueue","caretPos","setCaretPos","randomWords","wordList","setWordList","enteredKeys","setEnteredKeys","getArtseyValue","queue","mappedKeys","i","foundKey","Object","v","key","length","comboKeyCode","m","sort","reduce","pre","cur","hasOwnProperty","reset","interval","setInterval","joinedWordList","join","artsyKey","slice","split","clearInterval","current","focus","tabIndex","onFocus","onBlur","onKeyUp","oldArray","preventDefault","ref","pos","caretDiv","w","idxw","wordDiv","c","idxc","caret","ele","generateWordListElements","faSync","StyledApp","App","src","logo","alt","href","rel","GlobalStyle","createGlobalStyle","backgroundColor","primaryColor","Typography","ReactDOM","render","StrictMode","secondaryColor","colorBlue","colorGreen","document","getElementById"],"mappings":"wIACYA,EAKAC,E,uDCNG,MAA0B,iC,gEDC7BD,K,SAAAA,E,SAAAA,E,SAAAA,E,SAAAA,E,SAAAA,E,SAAAA,E,SAAAA,E,UAAAA,M,cAKAC,K,MAAAA,E,MAAAA,E,MAAAA,E,MAAAA,E,MAAAA,E,MAAAA,E,MAAAA,E,OAAAA,M,KAUL,I,IAAMC,EAA0C,CACnD,CAAEC,KAAM,YAAaC,MAAI,mBAChBJ,EAAUK,EAAI,CAAEC,QAAS,IAAKC,OAAQP,EAAUK,EAAGG,MAAOP,EAASI,IADnD,cAEhBL,EAAUS,EAAI,CAAEH,QAAS,IAAKC,OAAQP,EAAUS,EAAGD,MAAOP,EAASQ,IAFnD,cAGhBT,EAAUU,EAAI,CAAEJ,QAAS,IAAKC,OAAQP,EAAUU,EAAGF,MAAOP,EAASS,IAHnD,cAIhBV,EAAUW,EAAI,CAAEL,QAAS,IAAKC,OAAQP,EAAUW,EAAGH,MAAOP,EAASU,IAJnD,cAKhBX,EAAUY,EAAI,CAAEN,QAAS,IAAKC,OAAQP,EAAUY,EAAGJ,MAAOP,EAASW,IALnD,cAMhBZ,EAAUa,EAAI,CAAEP,QAAS,IAAKC,OAAQP,EAAUa,EAAGL,MAAOP,EAASY,IANnD,cAOhBb,EAAUc,EAAI,CAAER,QAAS,IAAKC,OAAQP,EAAUc,EAAGN,MAAOP,EAASa,IAPnD,cAQhBd,EAAUe,EAAI,CAAET,QAAS,IAAKC,OAAQP,EAAUe,EAAGP,MAAOP,EAASc,IARnD,IAWzB,CAAEZ,KAAM,aAAcC,MAAI,mBACjBJ,EAAUK,EAAI,CAAEC,QAAS,IAAKC,OAAQP,EAAUK,EAAGG,MAAOP,EAASI,IADlD,cAEjBL,EAAUS,EAAI,CAAEH,QAAS,IAAKC,OAAQP,EAAUS,EAAGD,MAAOP,EAASQ,IAFlD,cAGjBT,EAAUU,EAAI,CAAEJ,QAAS,IAAKC,OAAQP,EAAUU,EAAGF,MAAOP,EAASS,IAHlD,cAIjBV,EAAUW,EAAI,CAAEL,QAAS,IAAKC,OAAQP,EAAUW,EAAGH,MAAOP,EAASU,IAJlD,cAKjBX,EAAUY,EAAI,CAAEN,QAAS,IAAKC,OAAQP,EAAUY,EAAGJ,MAAOP,EAASW,IALlD,cAMjBZ,EAAUa,EAAI,CAAEP,QAAS,IAAKC,OAAQP,EAAUa,EAAGL,MAAOP,EAASY,IANlD,cAOjBb,EAAUc,EAAI,CAAER,QAAS,IAAKC,OAAQP,EAAUc,EAAGN,MAAOP,EAASa,IAPlD,cAQjBd,EAAUe,EAAI,CAAET,QAAS,IAAKC,OAAQP,EAAUe,EAAGP,MAAOP,EAASc,IARlD,K,OE+CxBC,EAAkBC,IAAOC,IAAV,s9CASQ,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,eAIxB,SAAAF,GAAC,OAAIA,EAAEC,MAAME,aAUF,SAAAH,GAAC,OAAIA,EAAEC,MAAMC,eAWT,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,eAgD/BE,EArJuC,SAACC,GAAoC,IAAD,EACxDC,mBAASvB,GAD+C,mBAC/EwB,EAD+E,KACtEC,EADsE,OAExDF,mBAA2BvB,EAAe,IAFc,mBAE/E0B,EAF+E,KAEtEC,EAFsE,KAItFC,qBAAU,WACN,IAAIC,EAASC,aAAaC,QAAQ,UAC9BC,EAAYH,EAASI,KAAKC,MAAML,QAA8BM,EAC/DH,GACCP,GAAW,SAAAW,GAAI,4BAAQA,GAAR,CAAcJ,OAGjC,IAAIK,EAAcP,aAAaC,QAAQ,eACvC,GAAGM,GAA+B,WAAhBA,EAA0B,CACxC,IAAIX,EAAU1B,EAAesC,MAAK,SAAAC,GAAG,OAAIA,EAAItC,OAASoC,KACnDX,GAASC,EAAWD,QAEnBW,GAA+B,WAAhBA,GAA4BL,GAC/CL,EAAWK,KAEhB,IACHJ,qBAAU,WAAQN,EAAMkB,iBAAiBd,KAAa,CAACA,IAEvD,IAQMe,EAAe,SAACC,EAAuBC,EAAqBC,GAC9D,IAAIC,EAA+B,CAAE5C,KAAM,SAAUC,KAAK,eAAMwB,EAAQxB,OACxE2C,EAAW3C,KAAKwC,GAAc,CAAEtC,QAASwC,EAAOvC,OAAQqC,EAAYpC,MAAOqC,GAE3E,IAAIG,EAAatB,EAAQuB,QAAO,SAAAC,GAAC,MAAe,WAAXA,EAAE/C,QACvC6C,EAAWG,KAAKJ,GAEhBpB,EAAWqB,GACXnB,EAAWkB,GACXf,aAAaoB,QAAQ,cAAe,UACpCpB,aAAaoB,QAAQ,SAAUjB,KAAKkB,UAAUN,KAGlD,OACI,eAAC/B,EAAD,WACI,2TAIA,2FAA6D,uBAA7D,iDACA,wBAAQ8B,MAAK,OAAGlB,QAAH,IAAGA,OAAH,EAAGA,EAASzB,KAAOmD,SA5Bb,SAACC,GACxB,IAAI3B,EAAUF,EAAQc,MAAK,SAAAC,GAAG,OAAIA,EAAItC,OAASoD,EAAEC,OAAOV,SACrDlB,IACCC,EAAWD,GACXI,aAAaoB,QAAQ,cAAeG,EAAEC,OAAOV,SAwB7C,SACMpB,EAAQe,KAAI,SAAAgB,GAAG,OAAI,wBAAQX,MAAQW,EAAItD,KAApB,SAA6BsD,EAAItD,YAE1D,sBAAKuD,GAAG,UAAR,UACI,sBAAKA,GAAG,eAAeC,UAAU,MAAjC,eAAyC,uBAAOb,MAAK,OAAGlB,QAAH,IAAGA,OAAH,EAAGA,EAASxB,KAAKJ,EAAUK,GAAGC,QAAUgD,SAAW,SAACC,GAAD,OAAOZ,EAAa3C,EAAUK,EAAGJ,EAASI,EAAGkD,EAAEC,OAAOV,aAC9J,sBAAKY,GAAG,eAAeC,UAAU,MAAjC,eAAyC,uBAAOb,MAAK,OAAGlB,QAAH,IAAGA,OAAH,EAAGA,EAASxB,KAAKJ,EAAUS,GAAGH,QAAUgD,SAAW,SAACC,GAAD,OAAOZ,EAAa3C,EAAUS,EAAGR,EAASQ,EAAG8C,EAAEC,OAAOV,aAC9J,sBAAKY,GAAG,eAAeC,UAAU,MAAjC,eAAyC,uBAAOb,MAAK,OAAGlB,QAAH,IAAGA,OAAH,EAAGA,EAASxB,KAAKJ,EAAUU,GAAGJ,QAAUgD,SAAW,SAACC,GAAD,OAAOZ,EAAa3C,EAAUU,EAAGT,EAASS,EAAG6C,EAAEC,OAAOV,aAC9J,sBAAKY,GAAG,eAAeC,UAAU,MAAjC,eAAyC,uBAAOb,MAAK,OAAGlB,QAAH,IAAGA,OAAH,EAAGA,EAASxB,KAAKJ,EAAUW,GAAGL,QAAUgD,SAAW,SAACC,GAAD,OAAOZ,EAAa3C,EAAUW,EAAGV,EAASU,EAAG4C,EAAEC,OAAOV,aAC9J,sBAAKY,GAAG,eAAeC,UAAU,MAAjC,eAAyC,uBAAOb,MAAK,OAAGlB,QAAH,IAAGA,OAAH,EAAGA,EAASxB,KAAKJ,EAAUY,GAAGN,QAAUgD,SAAW,SAACC,GAAD,OAAOZ,EAAa3C,EAAUY,EAAGX,EAASW,EAAG2C,EAAEC,OAAOV,aAC9J,sBAAKY,GAAG,eAAeC,UAAU,MAAjC,eAAyC,uBAAOb,MAAK,OAAGlB,QAAH,IAAGA,OAAH,EAAGA,EAASxB,KAAKJ,EAAUa,GAAGP,QAAUgD,SAAW,SAACC,GAAD,OAAOZ,EAAa3C,EAAUa,EAAGZ,EAASY,EAAG0C,EAAEC,OAAOV,aAC9J,sBAAKY,GAAG,eAAeC,UAAU,MAAjC,eAAyC,uBAAOb,MAAK,OAAGlB,QAAH,IAAGA,OAAH,EAAGA,EAASxB,KAAKJ,EAAUc,GAAGR,QAAUgD,SAAW,SAACC,GAAD,OAAOZ,EAAa3C,EAAUc,EAAGb,EAASa,EAAGyC,EAAEC,OAAOV,aAC9J,sBAAKY,GAAG,eAAeC,UAAU,MAAjC,eAAyC,uBAAOb,MAAK,OAAGlB,QAAH,IAAGA,OAAH,EAAGA,EAASxB,KAAKJ,EAAUe,GAAGT,QAAUgD,SAAW,SAACC,GAAD,OAAOZ,EAAa3C,EAAUe,EAAGd,EAASc,EAAGwC,EAAEC,OAAOV,oB,QC/C9K,I,EAAMc,EAAmB3C,IAAO4C,OAAV,wbAKR,SAAA1C,GAAC,OAAIA,EAAEC,MAAM0C,kBAmBT,SAAA3C,GAAC,OAAIA,EAAEC,MAAM0C,kBAIhBC,EApCf,SAAoBvC,GAChB,OACI,cAACoC,EAAD,CAAkBD,UAAYnC,EAAMwC,OAAS,SAAW,GAAKC,SAAUzC,EAAMyC,SAAUC,MAAO1C,EAAM2C,QAASC,QAAS5C,EAAM4C,QAA5H,SACoB,MAAd5C,EAAM6C,MAAgB,cAAC,IAAD,CAAiBA,KAAM7C,EAAM6C,UCjBpDC,EAAmC,CAC5C,UAAa,IACb,UAAa,IACb,eAAkB,IAClB,UAAa,IACb,UAAa,IACb,UAAa,IACb,UAAa,IACb,UAAa,IACb,eAAkB,IAClB,eAAkB,IAClB,UAAa,IACb,eAAkB,IAClB,eAAkB,IAClB,UAAa,IACb,UAAa,IACb,UAAa,IACb,eAAkB,IAClB,oBAAuB,IACvB,oBAAuB,QACvB,UAAa,aC2EjB,I,EAAMC,EAAoBtD,IAAOC,IAAV,8+CAiCL,SAAAC,GAAC,OAAIA,EAAEC,MAAM0C,kBAMF,SAAA3C,GAAC,OAAIA,EAAEC,MAAMoD,eA2BxB,SAAArD,GAAC,OAAIA,EAAEC,MAAM0C,kBAGN,SAAA3C,GAAC,OAAIA,EAAEC,MAAME,aACf,SAAAH,GAAC,OAAIA,EAAEC,MAAMqD,YAGrBC,EA9Jf,WACI,ICRiC9C,EDQ3B+C,EAAaC,iBAAuB,MADvB,EAGanD,oBAAS,GAHtB,mBAGZoD,EAHY,KAGDC,EAHC,OAISrD,mBAA2BvB,EAAe,IAJnD,mBAIZ6B,EAJY,KAIJgD,EAJI,OAKatD,mBAAuD,IALpE,mBAKZuD,EALY,KAKFC,EALE,OAOaxD,mBAAS,GAPtB,mBAOZyD,EAPY,KAOFC,EAPE,OAQa1D,mBAAwB2D,IAAY,KARjD,mBAQZC,EARY,KAQFC,EARE,OASmB7D,mBAAwB,IAT3C,mBASZ8D,EATY,KASCC,EATD,KAWbC,GClB2B7D,EDkBGG,ECjB7B,SAAC2D,GAGJ,IADA,IAAIC,EAAa,GADrB,WAEYC,GACJ,IAAIC,EAAWC,OAAO1F,KAAKwB,EAAQxB,MAAMoC,MAAK,SAAAuD,GAAC,OAAInE,EAAQxB,KAAK2F,GAAgBzF,UAAYoF,EAAME,GAAGI,YACrF3D,IAAbwD,GAAwBF,EAAWxC,KAAKvB,EAAQxB,KAAKyF,KAFpDD,EAAI,EAAGA,EAAIF,EAAMO,OAAQL,IAAM,EAA/BA,GAKR,IAAIM,EAAeP,EACdlD,KAAI,SAAA0D,GAAC,OAAIA,EAAE5F,UACX6F,OACAC,QAAO,SAACC,EAAKC,GAAU,OAAOD,GAAe,KAARA,EAAa,IAAM,IAAMC,IAAO,IAE1E,OAAyB,IAAtBZ,EAAWM,OAAqBN,EAAW,GAAGnF,MACzC8D,EAAOkC,eAAeN,GAAsB5B,EAAO4B,QACtD,IDITpE,qBAAU,kBAAM2E,MAAS,IACzB3E,qBAAU,WACN,IAAM4E,EAAWC,aAAY,WACzB,GAAuB,IAApB3B,EAASiB,OAAc,CACtB,IAAIW,EAAiBvB,EAASwB,KAAK,KAC/BC,EAAWrB,EAAeT,GAEd,cAAb8B,GAA4BvB,EAAYU,OAAS,GAChDT,GAAe,SAAAlD,GAAI,mBAAQA,EAAKyE,MAAM,EAAGzE,EAAK2D,OAAS,OACvDd,EAAYD,EAAW,SAGV7C,IAAbyE,GAAuC,cAAbA,IACkB,MAAvCF,EAAeI,MAAM,IAAI9B,IAAkC,UAAb4B,GAAgE,MAAvCF,EAAeI,MAAM,IAAI9B,MAEjGM,GAAe,SAAAlD,GAAI,4BAAQA,GAAR,CAAcwE,OACjC3B,EAAYD,EAAW,IAE/BD,EAAY,OAEjB,IACH,OAAO,kBAAMgC,cAAcP,MAC5B,CAAC1B,IAEJ,IAAMyB,EAAQ,WAAO,IAAD,EAChBjB,EAAe,IACfP,EAAY,IACZE,EAAY,GACZG,EAAYF,IAAY,KACxB,UAAAT,EAAWuC,eAAX,SAAoBC,SA8BxB,OACI,eAAC5C,EAAD,WACI,sBAAKb,GAAG,YAAY0D,SAAU,EAAGC,QAAU,kBAAMvC,GAAW,IAAQwC,OAAS,kBAAMxC,GAAW,IAASyC,QA7B/F,SAAChE,GACb0B,GAAY,SAAAuC,GAAQ,4BAAQA,GAAR,CAAkBjE,OACtCA,EAAEkE,kBA2B6HC,IAAM/C,EAAjI,WACOE,GAAa,qBAAKnB,GAAG,gBAAR,SAAwB,+CAzBnB,WAC7B,IAAIiE,EAAM,EACNC,EAAW,qBAAKlE,GAAG,UAiBvB,OAhBY2B,EAAS5C,KAAI,SAACoF,EAAGC,GACzB,IAAIC,EAAU,sBAAKpE,UAAU,OAAf,UACRkE,EAAEb,MAAM,IAAIvE,KAAI,SAACuF,EAAGC,GAClB,IAAIC,EAAQP,IAAQzC,EAAW0C,OAAWvF,EACtC8F,EAAM5C,EAAYU,OAAS,GAAK0B,EAC9B,qBAAKhE,UAAY4B,EAAYoC,KAASK,EAAI,iBAAmB,eAA7D,SAA8FA,GAAXC,EAAOD,GAC1F,qBAAKrE,UAAU,SAAf,SAAwCqE,GAAXC,EAAOD,GAE1C,OADAL,SACiBtF,IAAV6F,EAAsB,CAACA,EAAOC,GAAO,CAACA,MAE/CR,IAAQzC,GAAY0C,EACtB,qBAAKjE,UAAU,YAVsBmE,EAAOD,GAahD,OADAF,IACOI,KASDK,MAEN,wBAAO1E,GAAG,kBAAV,8BAAsE,IAAvB6B,EAAYU,OAAeV,EAAYA,EAAYU,OAAS,GAAK,UAChH,cAAC,EAAD,CAAY5B,KAAMgE,IAAQjE,QAAUqC,IACpC,cAAC,EAAD,CAAW/D,iBAAmBqC,QEvE1C,I,EAAMuD,EAAYrH,IAAOC,IAAV,sRAkBAqH,EAjCf,WACI,OACI,eAACD,EAAD,WACI,qBAAKE,IAAKC,EAAMC,IAAI,OAAOhF,GAAG,SAC9B,+CACA,yOAEyC,mBAAGiF,KAAK,oBAAoBzE,MAAM,iBAAiBV,OAAO,SAASoF,IAAI,aAAvE,qBAFzC,IAEyI,uBACrI,mBAAGD,KAAK,uFAAuFzE,MAAM,oBAArG,wBAHJ,MAG8I,mBAAGyE,KAAK,sBAAsBzE,MAAM,oBAApC,kCAE9I,cAAC,EAAD,QCRZ,IAAM2E,EAAcC,YAAH,mjCAQM,SAAA3H,GAAC,OAAIA,EAAEC,MAAM2H,mBAClB,SAAA5H,GAAC,OAAIA,EAAEC,MAAME,aA4Bb,SAAAH,GAAC,OAAIA,EAAEC,MAAM4H,gBAMT,SAAA7H,GAAC,OAAIA,EAAEC,MAAM0C,kBACH,SAAA3C,GAAC,OAAIA,EAAEC,MAAM4H,gBAK9BC,EArDf,WACI,OAAO,cAACJ,EAAD,KCkBXK,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,eAAC,IAAD,CAAehI,MAfT,CACVE,UAAW,UACXwC,eAAgB,UAChBkF,aAAc,UACdK,eAAgB,UAChBN,gBAAiB,UACjB1H,YAAa,qBACboD,SAAU,UACV6E,UAAW,UACXC,WAAY,UACZ/E,YAAa,WAKT,UACI,cAAC,IAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,SAGRgF,SAASC,eAAe,W","file":"static/js/main.c09757fc.chunk.js","sourcesContent":["export type ArtsyKeyMapping = { fromKey: string, toCode: string, toKey: string }\r\nexport enum ArtsyCode {\r\n    A = \"KeyA\", R = \"KeyR\", T = \"KeyT\", S = \"KeyS\",\r\n    E = \"KeyE\", Y = \"KeyY\", I = \"KeyI\", O = \"KeyO\"\r\n}\r\n\r\nexport enum ArtsyKey {\r\n    A = \"a\", R = \"r\", T = \"t\", S = \"s\",\r\n    E = \"e\", Y = \"y\", I = \"i\", O = \"o\"\r\n}\r\n\r\nexport interface KeyMapDefinition {\r\n    name: string;\r\n    keys: Record<ArtsyCode, ArtsyKeyMapping>;\r\n}\r\n\r\nexport const DefaultKeyMaps: Array<KeyMapDefinition> = [\r\n    { name: \"Left Hand\", keys: { \r\n            [ArtsyCode.A]: { fromKey: \"t\", toCode: ArtsyCode.A, toKey: ArtsyKey.A }, \r\n            [ArtsyCode.R]: { fromKey: \"r\", toCode: ArtsyCode.R, toKey: ArtsyKey.R }, \r\n            [ArtsyCode.T]: { fromKey: \"e\", toCode: ArtsyCode.T, toKey: ArtsyKey.T }, \r\n            [ArtsyCode.S]: { fromKey: \"w\", toCode: ArtsyCode.S, toKey: ArtsyKey.S }, \r\n            [ArtsyCode.E]: { fromKey: \"g\", toCode: ArtsyCode.E, toKey: ArtsyKey.E }, \r\n            [ArtsyCode.Y]: { fromKey: \"f\", toCode: ArtsyCode.Y, toKey: ArtsyKey.Y }, \r\n            [ArtsyCode.I]: { fromKey: \"d\", toCode: ArtsyCode.I, toKey: ArtsyKey.I }, \r\n            [ArtsyCode.O]: { fromKey: \"s\", toCode: ArtsyCode.O, toKey: ArtsyKey.O }\r\n        }\r\n    },\r\n    { name: \"Right Hand\", keys: {\r\n            [ArtsyCode.A]: { fromKey: \"y\", toCode: ArtsyCode.A, toKey: ArtsyKey.A }, \r\n            [ArtsyCode.R]: { fromKey: \"u\", toCode: ArtsyCode.R, toKey: ArtsyKey.R }, \r\n            [ArtsyCode.T]: { fromKey: \"i\", toCode: ArtsyCode.T, toKey: ArtsyKey.T }, \r\n            [ArtsyCode.S]: { fromKey: \"o\", toCode: ArtsyCode.S, toKey: ArtsyKey.S }, \r\n            [ArtsyCode.E]: { fromKey: \"h\", toCode: ArtsyCode.E, toKey: ArtsyKey.E }, \r\n            [ArtsyCode.Y]: { fromKey: \"j\", toCode: ArtsyCode.Y, toKey: ArtsyKey.Y }, \r\n            [ArtsyCode.I]: { fromKey: \"k\", toCode: ArtsyCode.I, toKey: ArtsyKey.I }, \r\n            [ArtsyCode.O]: { fromKey: \"l\", toCode: ArtsyCode.O, toKey: ArtsyKey.O }\r\n        }\r\n    }\r\n];","export default __webpack_public_path__ + \"static/media/logo.ba7ca334.png\";","import styled from \"styled-components\";\r\nimport { ChangeEvent, FC, useEffect, useState } from 'react';\r\nimport { ArtsyCode, ArtsyKey, DefaultKeyMaps, KeyMapDefinition } from '../model/KeyMapDefinition';\r\n\r\ninterface KeyMapperComponentProps {\r\n    onMappingChanged: (mapping: KeyMapDefinition) => void;\r\n}\r\n\r\nexport const KeyMapper: FC<KeyMapperComponentProps> = (props: KeyMapperComponentProps) => {\r\n    const [keymaps, setKeyMaps] = useState(DefaultKeyMaps);\r\n    const [mapping, setMapping] = useState<KeyMapDefinition>(DefaultKeyMaps[0]);\r\n\r\n    useEffect(() => {        \r\n        let keymap = localStorage.getItem(\"keymap\");\r\n        let customMap = keymap ? JSON.parse(keymap) as KeyMapDefinition : undefined;        \r\n        if(customMap) {\r\n            setKeyMaps(prev => [...prev, customMap as KeyMapDefinition]);\r\n        }\r\n\r\n        let selectedMap = localStorage.getItem(\"selectedMap\");\r\n        if(selectedMap && selectedMap !== \"Custom\") {\r\n            let mapping = DefaultKeyMaps.find(map => map.name === selectedMap);\r\n            if(mapping) setMapping(mapping);\r\n        }\r\n        else if(selectedMap && selectedMap === \"Custom\" && customMap) {            \r\n            setMapping(customMap);\r\n        }\r\n    }, []);\r\n    useEffect(() => { props.onMappingChanged(mapping); }, [mapping]);\r\n\r\n    const onSelectionChanged = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        let mapping = keymaps.find(map => map.name === e.target.value);\r\n        if(mapping) {\r\n            setMapping(mapping);\r\n            localStorage.setItem(\"selectedMap\", e.target.value);\r\n        }\r\n    };\r\n\r\n    const onKeyChanged = (targetCode: ArtsyCode, targetKey: ArtsyKey, value: string) => {\r\n        let newMapping: KeyMapDefinition = { name: \"Custom\", keys: { ...mapping.keys } };\r\n        newMapping.keys[targetCode] = { fromKey: value, toCode: targetCode, toKey: targetKey };\r\n\r\n        let newKeyMaps = keymaps.filter(k => k.name !== \"Custom\");\r\n        newKeyMaps.push(newMapping);\r\n\r\n        setKeyMaps(newKeyMaps);\r\n        setMapping(newMapping);\r\n        localStorage.setItem(\"selectedMap\", \"Custom\");\r\n        localStorage.setItem(\"keymap\", JSON.stringify(newMapping));\r\n    };\r\n\r\n    return (\r\n        <StyledKeyMapper>\r\n            <p>\r\n                This is the key mapper. It maps the keys of your keyboard to the indicated keys of artsey. The default mapping is for a left handed usage.\r\n                If you are already using combos on your keyboard, make sure, that you are not using the regarding keys in the mapping. This can cause problems.\r\n            </p>\r\n            <p>Please select a predefined mapping or define one yourself.<br/>The mapping will be saved between sessions.</p>\r\n            <select value={ mapping?.name } onChange={ onSelectionChanged }>\r\n                { keymaps.map(def => <option value={ def.name }>{ def.name }</option>) }\r\n            </select>\r\n            <div id=\"key-map\">\r\n                <div id=\"artsey-map-a\" className=\"key\">A <input value={ mapping?.keys[ArtsyCode.A].fromKey } onChange={ (e) => onKeyChanged(ArtsyCode.A, ArtsyKey.A, e.target.value) }></input></div>\r\n                <div id=\"artsey-map-r\" className=\"key\">R <input value={ mapping?.keys[ArtsyCode.R].fromKey } onChange={ (e) => onKeyChanged(ArtsyCode.R, ArtsyKey.R, e.target.value) }></input></div>\r\n                <div id=\"artsey-map-t\" className=\"key\">T <input value={ mapping?.keys[ArtsyCode.T].fromKey } onChange={ (e) => onKeyChanged(ArtsyCode.T, ArtsyKey.T, e.target.value) }></input></div>\r\n                <div id=\"artsey-map-s\" className=\"key\">S <input value={ mapping?.keys[ArtsyCode.S].fromKey } onChange={ (e) => onKeyChanged(ArtsyCode.S, ArtsyKey.S, e.target.value) }></input></div>\r\n                <div id=\"artsey-map-e\" className=\"key\">E <input value={ mapping?.keys[ArtsyCode.E].fromKey } onChange={ (e) => onKeyChanged(ArtsyCode.E, ArtsyKey.E, e.target.value) }></input></div>\r\n                <div id=\"artsey-map-y\" className=\"key\">Y <input value={ mapping?.keys[ArtsyCode.Y].fromKey } onChange={ (e) => onKeyChanged(ArtsyCode.Y, ArtsyKey.Y, e.target.value) }></input></div>\r\n                <div id=\"artsey-map-i\" className=\"key\">I <input value={ mapping?.keys[ArtsyCode.I].fromKey } onChange={ (e) => onKeyChanged(ArtsyCode.I, ArtsyKey.I, e.target.value) }></input></div>\r\n                <div id=\"artsey-map-o\" className=\"key\">O <input value={ mapping?.keys[ArtsyCode.O].fromKey } onChange={ (e) => onKeyChanged(ArtsyCode.O, ArtsyKey.O, e.target.value) }></input></div>\r\n            </div>\r\n        </StyledKeyMapper>\r\n    );\r\n}\r\n\r\nconst StyledKeyMapper = styled.div`{}\r\n    margin: 100px 0 0 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    select {\r\n        display: block;\r\n        margin-bottom: 20px;\r\n        border: 1px solid ${ p => p.theme.borderColor };\r\n        border-radius: 5px;\r\n        padding: 10px;\r\n        background: white;\r\n        color: ${ p => p.theme.textColor };\r\n        font-size: 1rem;\r\n    }\r\n\r\n    #key-map {\r\n        display: inline-grid;\r\n        gap: 10px;\r\n    }\r\n\r\n    .key {\r\n        border: 1px solid ${ p => p.theme.borderColor };\r\n        border-radius: 5px;\r\n        width: 50px;\r\n        height: 50px;\r\n        padding: 10px 5px;\r\n        font-weight: bold;\r\n        text-align: center;\r\n\r\n        input {\r\n            width: 100%;\r\n            box-sizing: border-box;\r\n            border: 1px solid ${ p => p.theme.borderColor };\r\n            text-align: center;\r\n            font-size: 0.8rem;\r\n            padding: 5px;\r\n        }\r\n    }\r\n\r\n    #artsey-map-a {\r\n        grid-row: 1;\r\n        grid-column: 1;\r\n    }\r\n\r\n    #artsey-map-r {\r\n        grid-row: 1;\r\n        grid-column: 2;\r\n    }\r\n\r\n    #artsey-map-t {\r\n        grid-row: 1;\r\n        grid-column: 3;\r\n    }\r\n\r\n    #artsey-map-s {\r\n        grid-row: 1;\r\n        grid-column: 4;\r\n    }\r\n\r\n    #artsey-map-e {\r\n        grid-row: 2;\r\n        grid-column: 1;\r\n    }\r\n\r\n    #artsey-map-y {\r\n        grid-row: 2;\r\n        grid-column: 2;\r\n    }\r\n\r\n    #artsey-map-i {\r\n        grid-row: 2;\r\n        grid-column: 3;\r\n    }\r\n\r\n    #artsey-map-o {\r\n        grid-row: 2;\r\n        grid-column: 4;\r\n    }\r\n`;\r\n\r\nexport default KeyMapper;","import styled from \"styled-components\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IconDefinition } from '@fortawesome/free-solid-svg-icons';\r\n\r\ninterface ButtonProps  {\r\n    active?: boolean;\r\n    disabled?: boolean;\r\n    icon?: IconDefinition;\r\n    tooltip?: string;\r\n    color?: string;\r\n    onClick?: React.MouseEventHandler<HTMLButtonElement | undefined>;\r\n}\r\n\r\nfunction IconButton(props: ButtonProps) {\r\n    return (\r\n        <StyledIconButton className={ props.active ? 'active' : '' } disabled={props.disabled} title={props.tooltip} onClick={props.onClick} >\r\n            { props.icon != null && <FontAwesomeIcon icon={props.icon} /> }\r\n        </StyledIconButton>\r\n    );\r\n}\r\n\r\nconst StyledIconButton = styled.button`\r\n    margin: 0;\r\n    padding: 2px;\r\n    border: none;\r\n    background: none;\r\n    color: ${ p => p.theme.textColorFaded };\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    font-size: 1.2rem;\r\n\r\n    svg {\r\n        flex: 1;\r\n    }\r\n\r\n    :active:enabled {\r\n        color: black!important;\r\n        transform: scale(0.85);\r\n    }\r\n\r\n    :hover:enabled {\r\n        cursor: pointer;\r\n        color: ${ p => p.theme.textColorFaded };\r\n    }\r\n`;\r\n\r\nexport default IconButton;\r\n","export const Combos: { [id: string]: string } = { \r\n    \"KeyE_KeyO\": \"b\",\r\n    \"KeyE_KeyY\": \"c\" ,\r\n    \"KeyA_KeyR_KeyT\": \"d\" ,\r\n    \"KeyA_KeyR\": \"f\",\r\n    \"KeyR_KeyT\": \"g\",\r\n    \"KeyE_KeyI\": \"h\",\r\n    \"KeyS_KeyT\": \"j\",\r\n    \"KeyO_KeyY\": \"k\",\r\n    \"KeyE_KeyI_KeyY\": \"l\",\r\n    \"KeyI_KeyO_KeyY\": \"m\",\r\n    \"KeyI_KeyO\": \"n\",\r\n    \"KeyE_KeyI_KeyO\": \"p\",\r\n    \"KeyA_KeyS_KeyT\": \"q\",\r\n    \"KeyI_KeyY\": \"u\",\r\n    \"KeyR_KeyS\": \"v\",\r\n    \"KeyA_KeyS\": \"w\",\r\n    \"KeyR_KeyS_KeyT\": \"x\",\r\n    \"KeyA_KeyR_KeyS_KeyT\": \"z\",\r\n    \"KeyE_KeyI_KeyO_KeyY\": \"Space\",\r\n    \"KeyE_KeyR\": \"Backspace\"\r\n};","import randomWords from \"random-words\";\r\nimport styled from \"styled-components\";\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { faSync } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport KeyMapper from './KeyMapper';\r\nimport IconButton from './IconButton';\r\nimport useKeyMapper from '../effects/KeyMapperEffect';\r\nimport { DefaultKeyMaps, KeyMapDefinition } from '../model/KeyMapDefinition';\r\n\r\nfunction ArtseyInput() {\r\n    const wordDivRef = useRef<HTMLDivElement>(null);\r\n\r\n    const [isFocused, setFocused] = useState(false);\r\n    const [keymap, setKeyMap] = useState<KeyMapDefinition>(DefaultKeyMaps[0]);\r\n    const [keyQueue, setKeyQueue] = useState<Array<React.KeyboardEvent<HTMLInputElement>>>([]);\r\n\r\n    const [caretPos, setCaretPos] = useState(0);\r\n    const [wordList, setWordList] = useState<Array<string>>(randomWords(25));\r\n    const [enteredKeys, setEnteredKeys] = useState<Array<string>>([]);\r\n    \r\n    const getArtseyValue = useKeyMapper(keymap);\r\n\r\n    useEffect(() => reset(), []);        \r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if(keyQueue.length !== 0) {\r\n                let joinedWordList = wordList.join(\" \");\r\n                let artsyKey = getArtseyValue(keyQueue);\r\n\r\n                if(artsyKey === \"Backspace\" && enteredKeys.length > 0) {\r\n                    setEnteredKeys(prev => [...prev.slice(0, prev.length - 1)]);\r\n                    setCaretPos(caretPos - 1);\r\n                }\r\n                else if(\r\n                    artsyKey !== undefined && artsyKey !== \"Backspace\"\r\n                    && ((joinedWordList.split(\"\")[caretPos] === \" \" && artsyKey === \"Space\") || joinedWordList.split(\"\")[caretPos] !== \" \")\r\n                ) {\r\n                        setEnteredKeys(prev => [...prev, artsyKey as string]);\r\n                        setCaretPos(caretPos + 1);\r\n                }                \r\n                setKeyQueue([]);\r\n            }\r\n        }, 75);\r\n        return () => clearInterval(interval);\r\n    }, [keyQueue]);\r\n\r\n    const reset = () => {\r\n        setEnteredKeys([]);\r\n        setKeyQueue([]);\r\n        setCaretPos(0);\r\n        setWordList(randomWords(25));\r\n        wordDivRef.current?.focus()\r\n    }\r\n\r\n    const onKeyUp = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        setKeyQueue(oldArray => [...oldArray, e]);\r\n        e.preventDefault();\r\n    }\r\n\r\n    const generateWordListElements = (): Array<JSX.Element> => {\r\n        let pos = 0;\r\n        let caretDiv = <div id=\"caret\"></div>;\r\n        let words = wordList.map((w, idxw) => {\r\n            let wordDiv = <div className=\"word\" key={idxw + w}>\r\n                { w.split(\"\").map((c, idxc) => {\r\n                    let caret = pos === caretPos ? caretDiv : undefined;\r\n                    let ele = enteredKeys.length - 1 >= pos\r\n                        ? <div className={ enteredKeys[pos] === c ? \"letter correct\" : \"letter wrong\" } key={idxc + c}>{c}</div>\r\n                        : <div className=\"letter\" key={idxc + c}>{c}</div>;\r\n                    pos++;\r\n                    return caret !== undefined ? [caret, ele] : [ele];\r\n                })}\r\n                { pos === caretPos && caretDiv }\r\n                <div className=\"space\"></div>\r\n            </div>\r\n            pos++;\r\n            return wordDiv;\r\n        });\r\n        return words;\r\n    }\r\n\r\n    return (\r\n        <StyledArtseyInput>\r\n            <div id=\"word-list\" tabIndex={0} onFocus={ () => setFocused(true) } onBlur={ () => setFocused(false) } onKeyUp={ onKeyUp } ref={ wordDivRef }>\r\n                { !isFocused && <div id=\"focus-message\"><p>Focus Please</p></div> }\r\n                { generateWordListElements() }\r\n            </div>\r\n            <small id=\"keycode-monitor\">Last Registered: { enteredKeys.length !== 0 ? enteredKeys[enteredKeys.length - 1] : \"NONE\" }</small>\r\n            <IconButton icon={faSync} onClick={ reset } ></IconButton>\r\n            <KeyMapper onMappingChanged={ setKeyMap }></KeyMapper>\r\n        </StyledArtseyInput>\r\n    );\r\n}\r\n\r\nconst StyledArtseyInput = styled.div`{}\r\n    display:flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    align-content: stretch;\r\n    align-items: stretch;\r\n    margin: 75px 0 25px 0;\r\n\r\n    #logo {\r\n        width: 150px;\r\n    }\r\n\r\n    p {\r\n        text-align: center;\r\n    }\r\n\r\n    #word-list {\r\n        position: relative;\r\n        font-size: 1.5rem;\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        outline: 0;\r\n        -webkit-user-select: none; /* Safari */        \r\n        -moz-user-select: none; /* Firefox */\r\n        -ms-user-select: none; /* IE10+/Edge */\r\n        user-select: none; /* Standard */\r\n    }\r\n\r\n    #keycode-monitor {\r\n        text-align: left;\r\n        font-weight: bold;\r\n        margin: 10px 0;\r\n        color: ${ p => p.theme.textColorFaded };\r\n    }\r\n\r\n    #caret {\r\n        display: block;\r\n        width: 0px;\r\n        border: 1px solid ${ p => p.theme.cursorColor };\r\n        animation: blinker 2s linear infinite;\r\n        margin-top: 5px;\r\n    }\r\n\r\n    @keyframes blinker {\r\n        50% {\r\n            opacity: 0;\r\n        }\r\n    }\r\n\r\n    #focus-message {\r\n        position: absolute;\r\n        width: 100%;\r\n        height: 100%;\r\n        text-align: center;\r\n        background: rgba(255, 255, 255, 0.75);\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n\r\n        p { font-weight: bold; }\r\n    }\r\n\r\n    .word {\r\n        display: flex;\r\n        margin-right: 10px;\r\n        color: ${ p => p.theme.textColorFaded };\r\n    }\r\n\r\n    .correct { color: ${ p => p.theme.textColor }; }\r\n    .wrong { color: ${ p => p.theme.colorRed }; }\r\n`;\r\n\r\nexport default ArtseyInput;","import { Combos } from \"../model/ComboDefinition\";\r\nimport { ArtsyCode, KeyMapDefinition } from \"../model/KeyMapDefinition\";\r\n\r\nexport default function useKeyMapper(mapping: KeyMapDefinition) {\r\n    return (queue: Array<React.KeyboardEvent<HTMLInputElement>>): string | undefined => \r\n    {\r\n        let mappedKeys = [];\r\n        for(let i = 0; i < queue.length; i++) {\r\n            let foundKey = Object.keys(mapping.keys).find(v => mapping.keys[v as ArtsyCode].fromKey === queue[i].key);\r\n            if(foundKey !== undefined) mappedKeys.push(mapping.keys[foundKey as ArtsyCode]);\r\n        }\r\n        \r\n        let comboKeyCode = mappedKeys\r\n            .map(m => m.toCode)\r\n            .sort()\r\n            .reduce((pre, cur) => { return pre + (pre !== \"\" ? \"_\" : \"\") + cur }, \"\");\r\n\r\n        if(mappedKeys.length === 1) return mappedKeys[0].toKey;\r\n        else if(Combos.hasOwnProperty(comboKeyCode)) return Combos[comboKeyCode];\r\n        else return undefined;\r\n    };\r\n}","import styled from \"styled-components\";\r\nimport logo from './assets/logo.png';\r\nimport ArtseyInput from './components/ArtseyInput';\r\n\r\nfunction App() {\r\n    return (\r\n        <StyledApp>\r\n            <img src={logo} alt=\"logo\" id=\"logo\" />\r\n            <h1>ARTSEY Tester</h1>\r\n            <p>\r\n                On this site you're able to test the great ARTSEY layout. Without the need of a dedicated keyboard. The tester supports all alpha key combos, space and backspace.\r\n                To learn more about ARTSEY visit the <a href=\"https://artsey.io\" title=\"ARTSEY Website\" target=\"_blank\" rel=\"noreferrer\">website</a>.<br/>\r\n                <a href=\"https://raw.githubusercontent.com/artseyio/artsey/main/layout%20diagrams/current.jpg\" title=\"ARTSEY Cheatsheet\">Cheatsheet</a> - <a href=\"Learning_Artsey.pdf\" title=\"Learn ARTSEY Book\">Learn ARTSEY Book</a>\r\n            </p>\r\n            <ArtseyInput></ArtseyInput>\r\n        </StyledApp>\r\n    );\r\n}\r\n\r\nconst StyledApp = styled.div`\r\n    display:flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    \r\n    max-width: 700px;\r\n    margin: 25px auto;\r\n\r\n    #logo {\r\n        width: 150px;S\r\n    }\r\n\r\n    p {\r\n        text-align: center;\r\n    }\r\n`;\r\n\r\nexport default App;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nfunction Typography() {\r\n    return <GlobalStyle/>;\r\n}\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    html, body, #root {\r\n        width: 100%;\r\n        height: 100%;\r\n        overflow: auto;\r\n    }\r\n\r\n    body {\r\n        background: ${ p => p.theme.backgroundColor };\r\n        color: ${ p => p.theme.textColor };\r\n        line-height: 1.65;\r\n        font-weight: 400;\r\n        font-family: Segoe UI, Roboto, Noto Sans, Ubuntu, Cantarell, Helvetica Neue,sans-serif;\r\n        overflow:hidden;\r\n    }\r\n\r\n    p {margin-bottom: 1.15rem; text-align: justify; }\r\n\r\n    h1, h2, h3, h4, h5 {\r\n        margin: 0 0 2rem 0;\r\n        line-height: 1.15;\r\n        font-weight: 100;\r\n    }\r\n    \r\n    h1 {\r\n        margin-top: 0;\r\n        font-size: 2.488em;\r\n    }\r\n\r\n    h2 { font-size: 2.074em; }\r\n    h3 { font-size: 1.728em; }\r\n    h4 { font-size: 1.44em; }\r\n    h5 { font-size: 1.2em; }\r\n    small, .text-small { font-size: 0.833em; color: #777777; }\r\n\r\n    a {\r\n        text-decoration: none;\r\n        color: ${ p => p.theme.primaryColor };\r\n        &:hover {\r\n            font-weight: bold;\r\n        }\r\n        i {\r\n            vertical-align: middle;\r\n            color: ${ p => p.theme.textColorFaded };\r\n            &:hover { color: ${ p => p.theme.primaryColor }; }\r\n        }\r\n    }\r\n`;\r\n\r\nexport default Typography;","import { Reset } from 'styled-reset';\r\nimport { ThemeProvider } from 'styled-components';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport Typography from './components/Typography';\r\n\r\nconst Theme = {\r\n    textColor: \"#727272\",\r\n    textColorFaded: \"#bebebe\",\r\n    primaryColor: \"#0068b4\",\r\n    secondaryColor: \"#0098ff\",\r\n    backgroundColor: \"#FFFFFF\",\r\n    borderColor: \"rgba(0, 0, 0, 0.1)\",\r\n    colorRed: \"#ff4a4a\",\r\n    colorBlue: \"#4c5fff\",\r\n    colorGreen: \"#2ea169\",\r\n    cursorColor: \"#1E1E1E\"\r\n};\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <ThemeProvider theme={Theme}>\r\n            <Reset/>\r\n            <Typography/>\r\n            <App />\r\n        </ThemeProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}